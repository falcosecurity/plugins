name: Build and test container plugin
on:
  pull_request:
    branches: [ main ]
    paths:
      - 'plugins/container/**'
  push:
    branches: [ main ]
    paths:
      - 'plugins/container/**'
  workflow_dispatch:

jobs:
  build-others:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest ]
        include:
          - os: windows-latest
            artifact-name: 'libcontainer-win'
            artifact-path: 'plugins/container/container.dll'
          - os: macos-latest
            artifact-name: 'libcontainer-osx'
            artifact-path: 'plugins/container/libcontainer.dylib'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: plugins/container/go-worker/go.mod
          cache-dependency-path: plugins/container/go-worker/go.sum

      - name: Build plugin library
        working-directory: plugins/container
        run: make

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

  build-linux:
    name: build-linux-${{ matrix.arch }}
    runs-on: ${{ (matrix.arch == 'arm64' && 'ubuntu-22.04-arm') || 'ubuntu-22.04' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
    container: golang:1.23-bullseye
    steps:
      - name: Install plugin deps
        run: apt-get update && apt-get install -y --no-install-recommends zip unzip ninja-build

      - name: Install updated cmake version ⛓️
        run: |
          curl -L -o /tmp/cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.31.4/cmake-3.31.4-linux-$(uname -m).tar.gz
          gzip -d /tmp/cmake.tar.gz
          tar -xpf /tmp/cmake.tar --directory=/tmp
          cp -R /tmp/cmake-3.31.4-linux-$(uname -m)/* /usr
          rm -rf /tmp/cmake-3.31.4-linux-$(uname -m)  

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Build plugin library
        working-directory: plugins/container
        run: make

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: libcontainer-${{ matrix.arch }}
          path: 'plugins/container/libcontainer.so'

  test:
    name: test-${{ matrix.arch }}
    needs: [build-linux]
    runs-on: ${{ (matrix.arch == 'arm64' && 'ubuntu-24.04-arm') || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
    steps:
      # libbtrfs: needed by podman package - build dep.
      # libgpgme: needed by github.com/containers/image, build dep since our go build tags use opengpg instead.
      - name: Install go test deps
        run: sudo apt-get install -y --no-install-recommends libbtrfs-dev libgpgme-dev

      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: plugins/container/go-worker/go.mod
          cache-dependency-path: plugins/container/go-worker/go.sum

      - name: Build go-worker executable
        working-directory: plugins/container
        run: make -C go-worker exe

      - name: Run tests
        working-directory: plugins/container
        run: |
          systemctl --user start podman
          make test

  falco-tests:
    needs: [build-linux]
    name: falco-tests-${{ matrix.arch }}
    runs-on: ${{ (matrix.arch == 'arm64' && 'ubuntu-22.04-arm') || 'ubuntu-22.04' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
    container:
      image: falcosecurity/falco:master-debian
    steps:
      - name: Download library
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: libcontainer-${{ matrix.arch }}
          path: /usr/share/falco/plugins/

      - name: Run falcosecurity/testing Falco tests
        uses: falcosecurity/testing@main
        with:
          test-falco: 'true'
          test-falcoctl: 'false'
          test-k8saudit: 'false'
          test-dummy: 'false'
          static: 'false'
          test-drivers: 'false'
          show-all: 'true'
          sudo: ''

  libs-tests:
    needs: [build-linux]
    uses: falcosecurity/libs/.github/workflows/reusable_e2e_tests.yaml@master
    with:
      container_plugin_artifact_name: 'libcontainer-amd64'
    secrets: inherit

  formatting-check:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run clang-format style check
        uses: jidicula/clang-format-action@4726374d1aa3c6aecf132e5197e498979588ebc8 #v4.15.0
        with:
          clang-format-version: '18'
          check-path: plugins/container
          exclude-regex: 'plugin_config_schema.h'
